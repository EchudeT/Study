# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import link_pb2 as link__pb2


class CountStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LotsofCounts = channel.unary_stream(
                '/CountPack.Count/LotsofCounts',
                request_serializer=link__pb2.CountRequest1.SerializeToString,
                response_deserializer=link__pb2.CountReply.FromString,
                )
        self.QuickCounts = channel.stream_stream(
                '/CountPack.Count/QuickCounts',
                request_serializer=link__pb2.CountRequest1.SerializeToString,
                response_deserializer=link__pb2.CountReply.FromString,
                )


class CountServicer(object):
    """Missing associated documentation comment in .proto file."""

    def LotsofCounts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QuickCounts(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CountServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LotsofCounts': grpc.unary_stream_rpc_method_handler(
                    servicer.LotsofCounts,
                    request_deserializer=link__pb2.CountRequest1.FromString,
                    response_serializer=link__pb2.CountReply.SerializeToString,
            ),
            'QuickCounts': grpc.stream_stream_rpc_method_handler(
                    servicer.QuickCounts,
                    request_deserializer=link__pb2.CountRequest1.FromString,
                    response_serializer=link__pb2.CountReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CountPack.Count', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Count(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def LotsofCounts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/CountPack.Count/LotsofCounts',
            link__pb2.CountRequest1.SerializeToString,
            link__pb2.CountReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QuickCounts(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/CountPack.Count/QuickCounts',
            link__pb2.CountRequest1.SerializeToString,
            link__pb2.CountReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
